https://blog.csdn.net/kellen_f/article/details/79018740
F(n) is the sum of max array ending with num[i]

F(n) = Max(F(n-1) + num[i],num[i])

// method one: dynamic programing without optimization, tested at https://leetcode.com/problems/maximum-subarray/description/
// using 13ms
public int getMaxSubArray(int[] num) { // time complexity O(n), space complexity O(n)
      if(num.length == 0) return 0;
      int[] f = new int[num.length];
      int max = num[0];
      f[0] = num[0];
      for(int i = 0; i < num.length; i++) {
           f[i] = Math.max(f[i-1] + num[i],num[i])
           if(max < f[i]) max = f[i];
      }
      return max;

}

// method two: dynamic programing with optimization,tested at https://leetcode.com/problems/maximum-subarray/description/
// using 12ms

public int getMaxSubArray(int[] num) { // time complexity O(n), space complexity(O(1)), using tmp to store the max f(x) for x belong [0,N] where
// N is the index i in the following code.
    if(num.size == 0) return 0;
    int tmp = num[0];
    int max = num[0];
    for(int i = 1; i < num.length; i++) {
        tmp = Math.MAX(tmp + num[i],num[i]);
        if(tmp > max) max = tmp;
    }
    return max;
}

问题描述：
在数组中，数字减去它右边的数字得到一个数对之差，求所有数对之差的最大值。
例如在数组{2,4,1,16,7,5,11,9}中，数对之差的最大值是11，是16-5的结果。

这个问题用暴力法破解的话，时间复杂度是O(n^2)，我们可以换下思路。

构建一个辅助数组diff，并且diff[i]=number[i]-number[i+1] (0<=i<N-1)，那么 diff[i]+diff[i+1]+...+diff[j]=numbers[i]-number[j+1]，

可见最大的数对之差numbers[i]-number[j+1]，同时也是 diff[i]+diff[i+1]+...+diff[j]的最大值，也就是连续子数组的最大和，这就回到了最大子数组问题。

public int getMaxPair(int nums) {
  if(nums.length == 0 || nums.length == 1) return 0;
  int diff[] = new int[nums.length - 1];
  for(int i = 0; i < diff.length; i++) {
      diff[i] = nums[i]-nums[i+1];
  }
  
  int result = getMaxSubArray(diff);
  return result;
}

public int getMaxSubArray(int nums[]) {
    if(nums.length == 0) return 0;
    int tmp = nums[0];
    int max = nums[0];
    for(int i = 0; i< nums.length; i++) {
       tmp = Math.max(tmp + nums[i],nums[i]);
       max = Math.max(tmp,max);
    }
    return max;
}

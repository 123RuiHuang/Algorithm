public boolean hasCycle(ListNode head) {
        if(head == null) return false;
        ListNode slow = head;
        ListNode fast = head.next;
        try{
            while(fast != slow) {
                slow = slow.next;
                fast = fast.next.next;
            }
            return true;
        }catch(Exception e) {
            return false;
        }
        
    }
    
    public boolean hasCycle(ListNode head) {
        if(head == null) return false;
        ListNode slow = head;
        ListNode fast = head;
        while(fast.next != null && fast.next.next != null) {
            fast = fast.next.next;
            slow = slow.next;
            if(slow == fast) return true;
        }
        return false;
    }
    
     public boolean hasCycle(ListNode head) {
        if(head == null) return false;
        ListNode dummy = new ListNode(0);
        ListNode curNode = head;
        ListNode nextNode;
        while(curNode != null) {
            if(curNode.next == dummy) return true;
            nextNode = curNode.next;
            curNode.next = dummy;
            curNode = nextNode;
        }
        
        return false;       
    }

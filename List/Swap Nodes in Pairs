Given a linked list, swap every two adjacent nodes and return its head.

Example:

Given 1->2->3->4, you should return the list as 2->1->4->3.

Note:

    Your algorithm should use only constant extra space.
    You may not modify the values in the list's nodes, only nodes itself may be changed


// Time :O(n) Space O(1)
public ListNode swapPairs(ListNode head) {
        if(head == null || head.next == null) return head;
        else {
            ListNode dummy = new ListNode(0);
            dummy.next = head;
            ListNode l = dummy;
            ListNode r = head;
            while(r != null && r.next != null) {
                l.next = r.next;
                r.next = l.next.next;
                l.next.next = r ;
                l = r;
                r = r.next;
            }
            
            return dummy.next;
        }
        
    }

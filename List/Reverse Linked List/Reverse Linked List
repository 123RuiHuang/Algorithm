// Iterative Time O(n); Space O(1)
 public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode cur = head;
        ListNode next;
        while(cur != null) {
           next = cur.next;
           cur.next = prev;
           prev = cur;
           cur = next;
        }
        return prev;
    }
    
 // recursive Time O(n); Space O(n)
 
 public ListNode reverseList(ListNode head) {
        if(head == null || head.next == null) return head;
         ListNode p = reverseList(head.next);
         head.next.next = head;
         head.next = null;
         return p;
}


class Solution {
   public ListNode reverseList(ListNode head) {
       int length = getLength(head);
       return helper(head,length);
   }
    
   public int getLength(ListNode head) {
       int length = 0;
       while(head != null) {
           length++;
           head = head.next;
       }
       return length;
   }
    
   public ListNode helper(ListNode head, int K) {
       ListNode curNode = head, prevNode = null, nextNode = null;
       int count = 0;
       while(count < K && curNode != null) {
           nextNode = curNode.next;
           curNode.next = prevNode;
           prevNode = curNode;
           curNode = nextNode;
       }
       
       if(curNode != null) {
           head.next = helper(curNode,K);
       }
       return prevNode;
   }
    
    
    
}

Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.

Note: Do not modify the linked list.
由于不能修改链表，所以不能像Linked List Cycle 里面那样设置一个dummy node,然后把所有节点都指向dummy node

// Time O(n); Space O(n)
public ListNode detectCycle(ListNode head) {
        if(head == null) return null;
        else {
            HashSet<ListNode> set = new HashSet<ListNode>();
            ListNode curNode = head;
            while(curNode != null) {
               if(set.contains(curNode)) return curNode;
               else {
                   set.add(curNode);
                   curNode = curNode.next;
               }
            }
        }
        return null;
}

// Time O(n); Space O(1)
public ListNode detectCycle(ListNode head) {
        if(head == null) return null;
        else {
            ListNode slow = head;
            ListNode fast = head;
            while(fast.next != null && fast.next.next != null) {
                fast = fast.next.next;
                slow = slow.next;
                if(fast == slow) {
                    slow = head;
                    while(fast != slow) {
                        fast = fast.next;
                        slow = slow.next;
                    }
                    return slow;
                }
            }
            return null;
        }
    }
    
    第一次相遇后，slow 回到原点。然后fast slow每次都移动一个点，最终会在圆圈的入口点处相遇
        证明：（x + y）/ v = ((x + y) + n (y + z)) / 2v => x = (n - 1)(y + z) + z
        x is the distance between head and cycle start node, y is distance between cycle start node and node they meet, z is distance between node they meet and the cycle 
        start point

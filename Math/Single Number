LeetCode 136

Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1

Example 2:

Input: [4,1,2,1,2]
Output: 4
//time o(n), space o(1)
public int singleNumber(int[] nums) {
        int res = 0;
        for(int a : nums) {
          res ^= a;
            
        }
        
    return res;
}
// time o(n) space o(n)
 public int singleNumber(int[] nums) {
        int res = 0;
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int a : nums) {
            if(!map.containsKey(a)) {
                map.put(a,1);
            }
            else {
                map.put(a,2);
            }
    }
    for(int a : nums) {
        if(map.get(a) == 1) {
            res = a;
        }
    }
    return res;
}

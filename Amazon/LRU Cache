public class LRUCache {
  private int capacity;
  private Map<Integer,Node> map;
  private List<Node> list;
  Node head;
  Node end;
  class Node {
      int key;
      int val;
      Node pre;
      Node next;
      public Node(int key, int val) {
          this.key = key;
          this.val = val;
      }
  }
    
  public void setHead(Node node) {
      node.next = head;
      node.pre = null;
      if(head != null) head.pre = node;
      head = node;
      if(end == null) end = node;
  }
   
  public void removeNode(Node node) {
      Node preN = node.pre;
      Node nextN = node.next;
      if(preN != null) preN.next = nextN;
      if(nextN != null) nextN.pre = preN;
      if(node == head) head = node.next;
      if(node == end) end = node.pre;
  }
    
  public LRUCache(int capacity) {
     this.capacity = capacity;
     this.map = new HashMap<Integer,Node>();
     this.list = new LinkedList<Node>();
  }
  
  
  
  
  public int get(int key) {
	 if(!map.containsKey(key)) return -1;
     else {
         Node node = map.get(key);
         removeNode(node);
         setHead(node);
         return node.val;
     }
	  
  }
  
  
	
  public void put(int key, int val) {
	  if(map.containsKey(key)) {
          Node node = map.get(key);
          node.val = val;
          removeNode(node);
          setHead(node);
      }
      else {
          if(map.size() == this.capacity) {
              map.remove(end.key);
              removeNode(end);
              Node node = new Node(key,val);
              setHead(node);
              map.put(key,node);  
          }
          else {
               Node node = new Node(key,val);
               setHead(node);
               map.put(key,node);  
          }
      }
  }
}

public class LRUCache {
  class Node {
	  int key;
	  int val;
	  Node pre;
	  Node next;
	  public Node(int key, int val) {
		  this.key = key;
		  this.val = val;
	  }
  }
  private int capacity;
  private Node head;
  private Node end;
  private Map<Integer, Node> map = new HashMap<Integer,Node>();
   
  public LRUCache(int capacity) {
      this.capacity = capacity;
      head = null;
      end = null;
  }
  
  public void removeNode(Node node) {
	  Node preN = node.pre;
	  Node nextN = node.next;
	  if(preN != null) preN.next = nextN;
	  if(nextN != null) nextN.pre = preN;
	  if(node == head) head = node.next;
	  if(node == end) end = node.pre;
  }
  
  
  public void setHead(Node node) {
	  node.next = head;
	  node.pre = null;
	  if(head != null) head.pre = node;
	  head = node;
	  if(end == null) end = head;
  }
  public int get(int key) {
	  if(!map.containsKey(key)) return -1;
	  else {
		  Node result = map.get(key);
		  removeNode(result);
		  setHead(result);
		  return result.val;
	  }
	  
  }
  
  
	
  public void put(int key, int val) {
	  Node node;
	  if(!map.containsKey(key)) {
		  node = new Node(key,val);
		  if(map.size() == capacity) {
              map.remove(end.key);
			  removeNode(end);
         
		  }
          map.put(key,node);
	  }
	  else {
		  node = map.get(key);
		  removeNode(node);
          node.val = val; 
	  }
	  setHead(node);
  }
}

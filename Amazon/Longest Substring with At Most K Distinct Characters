 public int lengthOfLongestSubstringKDistinct(String s, int k) {
        int size = s.length();
        if(size == 0) return 0;
        int p1 = 0, result = 0;
        char temp1,temp2;
        HashMap<Character,Integer> map = new HashMap<Character,Integer>();
        for(int i = 0; i < size; i++) {
            char temp = s.charAt(i);
            map.put(temp,map.getOrDefault(temp,0) + 1);
            while(map.size() > k) {
                temp2 = s.charAt(p1);
                if(map.get(temp2) == 1) {
                    map.remove(temp2);
                }
                else {
                    map.put(temp2, map.get(temp2) -1);
                }
                p1++;
            }
            result = Math.max(result, i - p1 + 1);
        }
        return result; 
    }
// 1 Substrings of length K with K distinct characters output distinct result
public String[] test(String s, int k) {
    if(s == null || s.length() < k) return null;
    ArrayList<String> result = new ArrayList<String>();
    HashMap<Character,Integer> map = new HashMap<Character,Integer>();
    int p1 = 0, size = s.length();
    char tmp;
    for(int i = 0; i < k; i++) {
      map.put(s.charAt(i),map.getOrDefault(s.charAt(i), 0) + 1);
    }
    if(map.size() == k) result.add(s.substring(0,k));
    for(int i = k; i < size; i++) {
      tmp = s.charAt(p1);
      if(map.get(tmp) == 1) {
          map.remove(tmp);
      }
      else {
        map.put(tmp,map.get(tmp) - 1);
      }
      p1++;
      map.put(s.charAt(i),map.getOrDefault(s.charAt(i),0) + 1);
      if(map.size() == k) {
        result.add(s.substring(p1,i+1));
      }
    }
    return result.toArray(new String[1]);
  }

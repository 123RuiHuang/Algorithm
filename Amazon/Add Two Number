
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

// Time O(n1 + n2), Space O(math.max(n1,n2))
public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head = new ListNode((l1.val + l2.val) % 10),curNode = head, nextNode;
        int flag = (l1.val + l2.val) / 10;
        while(l1.next != null && l2.next != null) {
            l1 = l1.next;
            l2 = l2.next;
            nextNode = new ListNode((l1.val + l2.val + flag) % 10);
            flag = (l1.val + l2.val + flag) / 10;
            curNode.next = nextNode;
            curNode = nextNode;
        }
        
        while(l1.next != null) {
            l1 = l1.next;
            nextNode = new ListNode((l1.val + flag) % 10);           
            flag = (l1.val + flag) / 10;
            curNode.next = nextNode;
            curNode = nextNode;
        }
        
        while(l2.next != null) {
            l2 = l2.next;
            nextNode = new ListNode((l2.val + flag) % 10);           
            flag = (l2.val + flag) / 10;
            curNode.next = nextNode;
            curNode = nextNode;
            
        }
        if(flag != 0) {
            nextNode = new ListNode(1);
            curNode.next = nextNode;
        }
        return head;
    }

We have a list of points on the plane.  Find the K closest points to the origin (0, 0).

(Here, the distance between two points on a plane is the Euclidean distance.)

You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)

Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].

Input: points = [[3,3],[5,-1],[-2,4]], K = 2
Output: [[3,3],[-2,4]]
(The answer [[-2,4],[3,3]] would also be accepted.)
// insert time :sort O(n2) space: O(1) stable
  public int[][] kClosest(int[][] points, int K) {
        insertSort(points);
      
        int[][] result = new int[K][2];
        for(int i = 0; i < K; i++) {
            result[i][0] = points[i][0];
            result[i][1] = points[i][1];
        }
        return result;
    }
    
    public void insertSort(int[][] points) {
        int j;
        double dist1,dist2;
        int[] temp;
        for(int i = 1; i < points.length; i++) {
            j = i - 1;
            temp = points[i];
            dist2 = Math.pow(temp[0],2) + Math.pow(temp[1],2);
            while(j >= 0 && (Math.pow(points[j][0],2) + Math.pow(points[j][1],2)) > dist2) {
                points[j+1] = points[j];
                j--;
            }
            points[j+1] = temp;
        }
    }
    
    
    // quicksort time o(nlgn) space o(1)
     public int[][] kClosest(int[][] points, int K) {
        quickSort(points, 0, points.length -1);
        
        int[][] result = new int[K][2];
        for(int i = 0; i < K; i++) {
            result[i][0] = points[i][0];
            result[i][1] = points[i][1];
        }
        return result;
    }
    
    
    public void quickSort(int[][] points, int start, int end) {
        if(start < end) {
            int mid = partition(points,start,end);
            quickSort(points, start, mid -1);
            quickSort(points, mid+1, end);
        }
    }
    
    public int partition(int[][] points, int start, int end) {
        int i = start - 1;
        int[] media = points[end];
        double distance = getDistance(points[end]);
        int[] tmp;
        for(int j = start; j < end; j++) {
            if(getDistance(points[j]) < distance) { // can be optimized
                i++;
                tmp = points[i];
                points[i] = points[j];
                points[j] = tmp;
                
            }
        }
        i++;
        tmp = points[i];
        points[i] = points[end];
        points[end] = tmp;
        
        return i;
    }
    
    public double getDistance(int[] point) {
        return Math.pow(point[0],2) + Math.pow(point[1],2);
    }

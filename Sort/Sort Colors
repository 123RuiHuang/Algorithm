Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Note: You are not suppose to use the library's sort function for this problem.
// Bubble Sort Time: O(n^2) Space:O（1）iterateive
public void sortColors(int[] nums) {
        int length = nums.length;
        int temp;
        boolean flag;
        for(int i = 0; i < length -1; i++) {
            flag = false;
            for(int j = 0; j < length - i - 1; j++) {
                if(nums[j] > nums[j + 1]) {
                    flag = true;
                    temp = nums[j];
                    nums[j] = nums[j+1];
                    nums[j+1] = temp;
                }
            }
            if(flag == false) break;
        }
      
    }
// Bubble Sort Time: O(n^2) Space:O（n）recursive
public void sortColors(int[] nums) {
        helper(nums,nums.length);
    }
    
    public void helper(int[] nums, int n) {
        if(n == 1) return;
        int temp;
        for(int i = 0; i < n - 1; i++) {
            if(nums[i] > nums[i+1]) {
                temp = nums[i+1];
                nums[i+1] = nums[i];
                nums[i] = temp;
            }
        }
        helper(nums,n-1);
    }

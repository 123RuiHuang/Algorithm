Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.

Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.

Note: You are not suppose to use the library's sort function for this problem.
// Bubble Sort Time: O(n^2) Space:O（1）iterateive
public void sortColors(int[] nums) {
        int length = nums.length;
        int temp;
        boolean flag;
        for(int i = 0; i < length -1; i++) {
            flag = false;
            for(int j = 0; j < length - i - 1; j++) {
                if(nums[j] > nums[j + 1]) {
                    flag = true;
                    temp = nums[j];
                    nums[j] = nums[j+1];
                    nums[j+1] = temp;
                }
            }
            if(flag == false) break;
        }
      
    }
// Bubble Sort Time: O(n^2) Space:O（n）recursive
public void sortColors(int[] nums) {
        helper(nums,nums.length);
    }
    
    public void helper(int[] nums, int n) {
        if(n == 1) return;
        int temp;
        for(int i = 0; i < n - 1; i++) {
            if(nums[i] > nums[i+1]) {
                temp = nums[i+1];
                nums[i+1] = nums[i];
                nums[i] = temp;
            }
        }
        helper(nums,n-1);
    }

// Merge Sort
public void sortColors(int[] nums) {
       mergeSort(nums,0,nums.length -1);
    }
    
    public void mergeSort(int[] nums, int l, int r) {
        if(l < r) {
            int m = (l + r) / 2;
            mergeSort(nums,l,m);
            mergeSort(nums,m+1,r);
            merge(nums,l,m,r);
        }
    }
    
    public void merge(int[] nums, int l, int m, int r) {
        int L[] = new int[m - l + 1];
        int R[] = new int[r - m];
        for(int i = 0; i < m-l+1; i++) L[i] = nums[i + l];
        for(int i = 0; i < r-m; i++) R[i] = nums[i + m + 1];
        int i = 0, j = 0, k = l;
        while(i < L.length && j < R.length) {
            if(L[i] <= R[j]) {
                nums[k] = L[i];
                i++;
            }
            else {
                nums[k] = R[j];
                j++;
            }
            k++;
        }
        
        while(i < L.length) {
            nums[k] = L[i];
            i++;
            k++;
        }
         while(j < R.length) {
            nums[k] = R[j];
            j++;
            k++;
        }
        for(int d = l; d <= r; d++ ) System.out.print(nums[d]);
        System.out.println("");

    }
    
    // insert sort
     public void sortColors(int[] nums) {
      countSort(nums);
    }
    
   public void countSort(int[] nums) {
       int max = getMax(nums);
       int min = getMin(nums);
       int[] sorted = new int[nums.length];
       int[] count = new int[max - min + 1];
       for(int i = 0; i < nums.length; i++) {
           if(count[nums[i] - min] == 0) count[nums[i] -min] = 1;
           else count[nums[i] - min] +=  1;
       }
       
       for(int i = 1; i < count.length; i++) count[i] += count[i-1];
       for(int i = nums.length -1; i >= 0; i--) {
                sorted[count[nums[i] - min]-1] = nums[i];
                count[nums[i] - min]--;
       }
       
       for(int i = 0; i < nums.length; i++) nums[i] = sorted[i]; 
   }
    
    public int getMax(int[] nums) {
        int max = Integer.MIN_VALUE;
        for(int elem:nums) {
            if(elem > max) max = elem;
        }
        return max;
    }
    
    public int getMin(int[] nums) {
        int min = Integer.MAX_VALUE;
        for(int elem: nums) {
            if(elem < min) min = elem;
        }
        return min;
    }

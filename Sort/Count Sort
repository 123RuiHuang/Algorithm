// time: O(n+k); spaceO(n+k) n is length of nums, while k is the range of nums.
   public void countSort(int[] nums) {
       int max = getMax(nums);
       int min = getMin(nums);
       int[] sorted = new int[nums.length];
       int[] count = new int[max - min + 1];
       for(int i = 0; i < nums.length; i++) {
           if(count[nums[i] - min] == 0) count[nums[i] -min] = 1;
           else count[nums[i] - min] +=  1;
       }
       
       for(int i = 1; i < count.length; i++) count[i] += count[i-1];
       for(int i = nums.length -1; i >= 0; i--) {
                sorted[count[nums[i] - min]-1] = nums[i];
                count[nums[i] - min]--;
       }
       
       for(int i = 0; i < nums.length; i++) nums[i] = sorted[i]; 
   }
    
    public int getMax(int[] nums) {
        int max = Integer.MIN_VALUE;
        for(int elem:nums) {
            if(elem > max) max = elem;
        }
        return max;
    }
    
    public int getMin(int[] nums) {
        int min = Integer.MAX_VALUE;
        for(int elem: nums) {
            if(elem < min) min = elem;
        }
        return min;
    }

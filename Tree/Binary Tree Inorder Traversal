 // iterative Time O(n); Space O(n)
 public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<Integer>();
        TreeNode curNode = root;
        Deque<TreeNode> stack = new ArrayDeque<TreeNode>();
        
        while(!stack.isEmpty() || curNode != null) {
            if(curNode != null) {
                stack.push(curNode);
                curNode = curNode.left;
                
            }
            else {
                curNode = stack.pop();
                list.add(curNode.val);
                curNode = curNode.right;
            }
        }
        return list;
    }
    
    
  // recursive Time O(n); Space O(n)
   public List<Integer> inorderTraversal(TreeNode root) {
          List<Integer> list = new ArrayList<Integer>();
          inorderTraversalHelper(root,list);
          return list;
     }
    
    public void inorderTraversalHelper(TreeNode root, List<Integer> list) {
        if(root == null) return;
        inorderTraversalHelper(root.left,list);
        list.add(root.val); 
        inorderTraversalHelper(root.right,list);
    }

//time O(n) space O(n)
public boolean findTarget(TreeNode root, int k) {
       ArrayList<Integer> list = inOrderTraversal(root);
       int size = list.size();
       if(size < 2) return false;
        int left = 0, right = size - 1, sum = 0;
        boolean result = false;
        while(left < right) {
            sum = list.get(left) + list.get(right);
            if(sum == k) {
                result = true;
                break;
            }
            else if(sum < k) left++;
            else right--;
        }
        return result;
    }
    
    public ArrayList<Integer> inOrderTraversal(TreeNode root) {
        ArrayList<Integer> list = new ArrayList<Integer>();
        TreeNode curNode = root;
        LinkedList<TreeNode> stack = new LinkedList<TreeNode>();
        while(!stack.isEmpty() || curNode != null) {
            if(curNode != null) {
                stack.push(curNode);
                curNode = curNode.left;
            }
            else{
                curNode = stack.pop();
                list.add(curNode.val);
                curNode = curNode.right;
            }
            
        }
        return list;
    }

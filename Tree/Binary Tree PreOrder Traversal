// Iterative  Time O(n); Space O(n)
  public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new ArrayList<Integer>();
        if(root == null) return list;
        Deque<TreeNode> stack = new ArrayDeque<TreeNode>();
        TreeNode curNode = root;
        while(!stack.isEmpty() || curNode != null) {
            if(curNode != null) {
                list.add(curNode.val);
                stack.push(curNode);
                curNode = curNode.left;
            }
            else {
                curNode = stack.pop();
                curNode = curNode.right;
            }
        }
        return list;
    }
    
 //Recursive Time O(n); Space O(n)
 public List<Integer> preorderTraversalRecursice(TreeNode root) {
    	List<Integer> list = new ArrayList<Integer>();
    	preorderTraversalRecursiceHelper(list,root);
    	for(int i = 0; i < list.size(); i++) {
        	System.out.println(list.get(i));
        }
        return list;
    }
    
 public void preorderTraversalRecursiceHelper(List<Integer> list, TreeNode root) {
    	if(root == null) return;
    	list.add(root.val);
    	if(root.left != null) preorderTraversalRecursiceHelper(list,root.left);
    	if(root.right != null) preorderTraversalRecursiceHelper(list,root.right);
      
    	
}


Complexity Analysis

Since each node in the tree is visited only once, the time complexity is O(n)O(n)O(n), where nnn is the number of nodes in the tree. We cannot do better than that, since at the very least we have to visit each node to invert it.

Because of recursion, O(h)O(h)O(h) function calls will be placed on the stack in the worst case, where hhh is the height of the tree. Because h∈O(n)h\in O(n)h∈O(n), the space complexity is O(n)O(n)O(n).
 
public TreeNode invertTree(TreeNode root) {
        if (root == null) return null;
        TreeNode left = root.left;
        root.left = invertTree(root.right);
        root.right = invertTree(left);
        return root;
}

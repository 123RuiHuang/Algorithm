
 Given an integer array with no duplicates. A maximum tree building on this array is defined as follow:

    The root is the maximum number in the array.
    The left subtree is the maximum tree constructed from left part subarray divided by the maximum number.
    The right subtree is the maximum tree constructed from right part subarray divided by the maximum number.

Construct the maximum tree by the given array and output the root node of this tree. 

//overage Time O(nlgn), space O(lgn); worst Time O(n^2), space O(n)
 public TreeNode constructMaximumBinaryTree(int[] nums) {
        return helper(nums,0,nums.length - 1);
    }
    
    public TreeNode helper(int[] nums,int left,int right) {
        if(left > right) return null;
        int index = getMax(nums,left,right);
        TreeNode root = new TreeNode(nums[index]);
        root.left = helper(nums,left,index -1);
        root.right = helper(nums,index + 1, right);
        return root;
        
    }
    
    public int getMax (int[] nums, int left, int right)  { // return index of max number
        int max = Integer.MIN_VALUE;
        int index = -1;
        for(int i = left; i <= right; i++) {
            if(nums[i] > max) {
                index = i;
                max = nums[i];
            }
        }
        return index;
    }            

class Trie {
    class TrieNode {
       TrieNode[] children = new TrieNode[26];
       boolean isEndOfWord;
       TrieNode() {
           isEndOfWord = false;
        }
    }

    TrieNode root;
    /** Initialize your data structure here. */
    public Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode curNode = root;
        int level = word.length();
        for (int i = 0; i < level; i++) {
            int index = word.charAt(i) - 'a';
            if(curNode.children[index] == null) curNode.children[index] = new TrieNode();
            curNode = curNode.children[index];
        }
        curNode.isEndOfWord = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode curNode = root;
        int level = word.length();
        boolean result = true;
        for (int i = 0; i < level; i++) {
            int index = word.charAt(i) - 'a';
            if (curNode.children[index] != null) curNode = curNode.children[index];
            else {
                result = false;
                break;
            }
        }
        return result && curNode.isEndOfWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode curNode = root;
        int level = prefix.length();
        boolean result = true;
        for (int i = 0; i < level; i++) {
            int index = prefix.charAt(i) - 'a';
            if (curNode.children[index] != null) curNode = curNode.children[index];
            else {
                result = false;
                break;
            }
        }
        return result;
    }
}

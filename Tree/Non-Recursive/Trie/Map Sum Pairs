class MapSum {

    class TrieNode {
        TrieNode[] children = new TrieNode[26];
        boolean isEndOfWord = false;
        int sum = 0;
    }
    
    TrieNode root;
    
    /** Initialize your data structure here. */
    public MapSum() {
        root = new TrieNode();
    }
    
    public void insert(String key, int val) {
        TrieNode node = search(key);
        
        int level = key.length();
        TrieNode curNode = root;
        for (int i = 0; i < level; i++) {
            int index = key.charAt(i) - 'a';
            if (curNode.children[index] == null) {
                curNode.children[index] = new TrieNode();
            }
            curNode = curNode.children[index];
            if (node != null) curNode.sum += (val - node.sum);
            else curNode.sum += val;
        }
        curNode.isEndOfWord = true;
    }
    
    public TrieNode search(String key) {
        int level = key.length();
        TrieNode curNode = root;
        for (int i = 0; i< level; i++) {
            int index = key.charAt(i) - 'a';
            if (curNode.children[index] != null) curNode = curNode.children[index];
            else return null;
        }
        return curNode.isEndOfWord ? curNode : null;
    }
    
    
    public int sum(String prefix) {
        int level = prefix.length();
        TrieNode curNode = root;
        int sum = 0;
        for(int i = 0; i < level; i++) {
            int index = prefix.charAt(i) - 'a';
            if (curNode.children[index] == null) {
                sum = 0;
                break;
            } else {
                curNode = curNode.children[index];
                sum = curNode.sum;
            }
        }
        return sum;
    }
}

 //linkedlist used as queue support add -> add element to the end of list; poll -> retrieve and remove first element
// likedlist used as stack support push -> add element to the start of list; pop -> retrieve and remove first element
    
// Time O(n), Space O(n)
public List<Double> averageOfLevels(TreeNode root) {
        List<Double> result = new ArrayList<Double>();
        if (root == null) return result;
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        while(!queue.isEmpty()) {
            int size = queue.size(); 
            double levelSum = 0;
            for (int i = 0; i < size; i++) {
                TreeNode curNode = queue.poll();
                levelSum += curNode.val;
                if (curNode.left != null) queue.add(curNode.left);
                if (curNode.right != null) queue.add(curNode.right);
            }
            result.add(levelSum / size);
            levelSum = 0;
        }
        return result;
 }

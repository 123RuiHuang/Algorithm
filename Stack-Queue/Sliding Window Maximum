// time O(Nlogk); space O(k)
public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums.length == 0) return new int[0];
        PriorityQueue<Integer> maxheap = new PriorityQueue<Integer>(new Comparator<Integer>(){
            public int compare(Integer a, Integer b) {
                return a > b? -1:1;
            }
        });
        int[] result = new int[nums.length - k + 1];
        for(int i = 0; i < k; i++) maxheap.offer(nums[i]);
        result[0] = maxheap.peek();
        for(int i = k; i < nums.length; i++) {
            maxheap.remove(nums[i - k]);
            maxheap.add(nums[i]);
            result[i - k + 1] = maxheap.peek();
        }
        return result;
    }

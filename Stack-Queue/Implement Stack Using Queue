class MyStack {
    LinkedList<Integer> queue1;
    LinkedList<Integer> queue2;
    /** Initialize your data structure here. */
    public MyStack() {
        queue1 = new LinkedList<Integer>();
        queue2 = new LinkedList<Integer>();
    }
    
    /** Push element x onto stack. */
    public void push(int x) {
        queue1.add(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        int size = queue1.size();
        LinkedList<Integer> tmp;
        for(int i = 0; i < size -1; i++) {
            queue2.add(queue1.pop());
        }
        int result = queue1.pop();
        tmp = queue1;
        queue1 = queue2;
        queue2 = tmp;
        return result;
        
    }
    
    /** Get the top element. */
    public int top() {
        return queue1.getLast();
    }
    
    /** Returns whether the stack is empty. */
    public boolean empty() {
        return queue1.isEmpty();
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */
